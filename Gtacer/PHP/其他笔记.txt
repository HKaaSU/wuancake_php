【使用global访问全局变量】
<?php
global $x;
global $y;
$x=5;$y=10;
function myTest() {		//函数名不区分大小写
  global $x,$y;
  $y=$x+$y;
}
myTest();
echo $y; // 输出 15
?>



【使用static声明静态变量】
<?php
	static $x=0;
?>



【类型运算符】(instanceof用于确定一个PHP变量是否属于一类class的实例)
代码案例：
class dog｛｝
class cat｛｝
//创建一个对象
$cat1=new cat
//在实际开发中，我们可能需要去判断某个变量是否是某个类型
if($cat1 instanceof cat){
	echo "cat1是一只猫";
}



【使用define定义常量】
define("PI",3.14);

【使用const定义常量】
const PI=3.14;


【使用unset($var)删除一个变量】
$a=12;
unset($a);
echo $a;	//无法输出



【给某些参数赋默认值】
function abc($c,$a=2){
	$res=$a+$b;
	return $res;
}
$e==70;
echo abc($e).'||';	//没有为第二个形参传值，所以第二个形参的值为设置的默认值
echo abcc($e,90);	//为第二个形参传值时，会覆盖掉为其设置的默认值



【引入需要的php文件】
require 'test.php';	//引入后才可以使用该PHP页面定义的函数；
require_once 'test.php';	//通常使用此函数,会先判断是否在之前包含过一次test.php文件
include 'test.php';	//与require作用相同，但是在出错时会继续执行下面的语句，而require出错时会终止程序执行



【对浮点数进行四舍五入】
echo round(1.355846,2);		//打印结果为1.36



【如何关闭notice级别的提示】
1，在php.ini文件中改动erroe_reporting
	改为：
	error_reporting = E_A & ~ E_NOTICE

2，在你想禁止notice错误提示的页面中加入下面代码：
erroe_reporting(E_ALL^E_NOTICE);

3，$a=@$b	//如果$b出现了一个不致命的错误，那么将不会提示


【拆分数组】
$arr1=explode(" ",$arr);     //以双引号内的字符为界限拆分数组，将新的值赋给逗号后的数组



【保留提交的表单内容】
<input type="text" name="xxx" value="<?php echo $abc; ?>"/>	//<>


【跳转到某页面】
header("Location:a.php");
header("Refresh:3;url=http://......");三秒后跳转到某页面


【读写文件】
$text=fopen('test.txt','a');
fread($text,filesize("test.txt"));
fwrite($text,'hello world/r/n');

【换行符】
echo "hello world".PHP_EOL;